---
import InterpunctSpacer from "../InterpunctSpacer/InterpunctSpacer.astro";
import TraitInfo from "../TraitInfo";
import {
  professionToClass,
  subProfessionIdToSubclass,
} from "../../utils/classes";
import { getMeleeOrRangedOrBoth } from "./helpers";
import * as classes from "./styles.css";

import type * as OutputTypes from "../../output-types";

interface Props {
  character: OutputTypes.Character;
}

const { character } = Astro.props;
const [baseName, alterName] = character.name.split(/ the /i);
---

<script>
  const toggleButton = document.getElementById(
    "trait-toggle"
  ) as HTMLButtonElement;
  const traitInfoContainer = document.getElementById(
    "trait-info-container"
  ) as HTMLDivElement;
  toggleButton.addEventListener("click", () => {
    traitInfoContainer.hasAttribute("hidden")
      ? traitInfoContainer.removeAttribute("hidden")
      : traitInfoContainer.setAttribute("hidden", "");
    toggleButton.getAttribute("aria-pressed") === "true"
      ? toggleButton.setAttribute("aria-pressed", "false")
      : toggleButton.setAttribute("aria-pressed", "true");
  });
</script>

<div class={classes.root}>
  <div class={classes.name}>
    <h2 class={classes.baseName}>{baseName}</h2>
    {alterName && <h3 class={classes.alterName}>The {alterName}</h3>}
  </div>

  <div class={classes.classBranch}>
    {professionToClass(character.profession)}
    {subProfessionIdToSubclass(character.subProfessionId)}
    <InterpunctSpacer />
    {getMeleeOrRangedOrBoth(character.position, character.description)}
  </div>

  <button
    id="trait-toggle"
    class={classes.traitToggle}
    aria-pressed="false"
    aria-controls="trait-info-container">Trait</button
  >

  <div hidden id="trait-info-container" class={classes.traitInfo}>
    <TraitInfo
      subProfessionId={character.subProfessionId}
      showSubclassIcon={true}
    />
  </div>
</div>
