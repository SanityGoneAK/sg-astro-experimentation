---
import InterpunctSpacer from "../InterpunctSpacer/InterpunctSpacer.astro";
import TraitInfo from "../TraitInfo/TraitInfo.astro";
import ToggleButton from "../ToggleButton/ToggleButton.astro";
import StarIcon from "../icons/StarIcon.astro";
import {
  operatorAvatar,
  operatorBranchIcon,
  operatorClassIcon,
} from "../../utils/images";
import { professionToClass } from "../../utils/classes";
import { subProfessionIdToBranch } from "../../utils/branches";
import { getMeleeOrRangedOrBoth } from "./helpers";

import * as classes from "./styles.css";

import type * as OutputTypes from "../../output-types";

interface Props {
  operator: OutputTypes.Character;
}

const { operator } = Astro.props;
const [baseName, alterName] = operator.name.split(/ the /i);
const operatorClass = professionToClass(operator.profession);
const rarity = (operator.rarity + 1) as 1 | 2 | 3 | 4 | 5 | 6;
---

<div class={classes.root}>
  <div class={classes.portraitNameRarity}>
    <img
      class={classes.portrait}
      src={operatorAvatar(operator.charId)}
      alt=""
    />
    <div class={classes.name}>
      <h2 class={classes.baseName}>{baseName}</h2>
      {alterName && <h3 class={classes.alterName}>The {alterName}</h3>}
    </div>
    <div class={classes.rarityAndLimitedness}>
      {
        operator.isLimited && (
          <span class={classes.limitedText[rarity]}>Limited</span>
        )
      }
      <span class="visually-hidden">Rarity: {rarity}</span>
      {
        Array(rarity)
          .fill(null)
          .map(() => <StarIcon rarity={rarity} />)
      }
    </div>
  </div>

  <div class={classes.classBranchTraitToggle}>
    <div class={classes.classBranch}>
      <span class={classes.classBranchNameAndIconWrapper}>
        <img
          class={classes.classBranchIcon}
          src={operatorClassIcon(operatorClass.toLowerCase())}
          alt=""
        />
        {operatorClass}
      </span>
      <span class={classes.branchNameAndIconWrapper}>
        <img
          class={classes.classBranchIcon}
          src={operatorBranchIcon(operator.subProfessionId)}
          alt=""
        />
        {subProfessionIdToBranch(operator.subProfessionId)}
      </span>
      <InterpunctSpacer class={classes.spacer} />
      <span class={classes.position}
        >{getMeleeOrRangedOrBoth(operator.position, operator.description)}</span
      >
    </div>

    <ToggleButton
      buttonId="trait-toggle"
      containerId="trait-info-container"
      initiallyVisible={false}
    >
      Trait
    </ToggleButton>
  </div>

  <TraitInfo
    id="trait-info-container"
    subProfessionId={operator.subProfessionId}
  />
</div>
